// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model Customer {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Order     Order[]

  @@map("customers")
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  variants    ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id        String      @id @default(cuid())
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      String // e.g., "250ml", "50g"
  price     Int
  stock     Int         @default(0) // Tracks inventory
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]

  @@unique([productId, size])
  @@map("product_variants")
}

enum OrderType {
  PURCHASE
  SALE
}

model Order {
  id           String        @id @default(cuid())
  customerId   String
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  type         OrderType     @default(PURCHASE)
  status       OrderStatus   @default(PENDING)
  placedAt     DateTime      @db.Date
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  items        OrderItem[]
  transactions Transaction[]

  @@map("orders")
}

model OrderItem {
  id               String         @id @default(cuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity         Int            @db.Integer
  unitPrice        Int            @db.Integer
  totalPrice       Int            @db.Integer
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([orderId, productVariantId])
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  BANK
  CASH
}

enum TransactionDirection {
  IN
  OUT
}

model Transaction {
  id            String               @id @default(cuid())
  name          String
  type          TransactionType      @default(BANK)
  direction     TransactionDirection @default(IN)
  orderId       String
  order         Order                @relation(fields: [orderId], references: [id])
  total         Int                  @db.Integer
  isProductCost Boolean              @default(false)

  @@map("transactions")
}
