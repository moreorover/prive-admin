// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  email         String          @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]
  hairOrder     HairOrder[]
  hairOrderNote HairOrderNote[]

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model Customer {
  id                      String                    @id @default(cuid(2))
  name                    String                    @unique
  phoneNumber             String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime?                 @updatedAt
  orders                  Order[]
  transactions            Transaction[]
  appointmentsAsCustomer  Appointment[]
  appointmentsAsPersonnel PersonnelOnAppointments[]
  hairOrders              HairOrder[]               @relation("CustomerOrders")

  @@map("customers")
}

model Product {
  id          String           @id @default(cuid(2))
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  variants    ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id        String      @id @default(cuid(2))
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      String // e.g., "250ml", "50g"
  price     Int
  stock     Int         @default(0) // Tracks inventory
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]

  @@unique([productId, size])
  @@map("product_variants")
}

enum OrderType {
  PURCHASE
  SALE
}

model Order {
  id           String        @id @default(cuid(2))
  customerId   String
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  type         OrderType     @default(PURCHASE)
  status       OrderStatus   @default(PENDING)
  placedAt     DateTime      @db.Date
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  items        OrderItem[]
  transactions Transaction[]

  @@map("orders")
}

model OrderItem {
  id               String         @id @default(cuid(2))
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity         Int            @db.Integer
  unitPrice        Int            @db.Integer
  totalPrice       Int            @db.Integer
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([orderId, productVariantId])
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  BANK
  CASH
  PAYPAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
}

model Transaction {
  id              String            @id @default(cuid(2))
  name            String?
  notes           String?
  amount          Int               @db.Integer
  type            TransactionType   @default(BANK)
  status          TransactionStatus @default(PENDING)
  completedDateBy DateTime          @default(now()) @db.Date
  createdAt       DateTime          @default(now())

  customerId    String
  customer      Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderId       String?
  order         Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull)
  appointmentId String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  hairOrderId   String?
  hairOrder     HairOrder?   @relation(fields: [hairOrderId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Appointment {
  id       String   @id @default(cuid(2))
  name     String
  startsAt DateTime
  clientId String
  client   Customer @relation(fields: [clientId], references: [id], onDelete: Cascade)

  personnel PersonnelOnAppointments[]
  notes     AppointmentNote[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("appointments")
}

model AppointmentNote {
  id   String @id @default(cuid(2))
  note String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("appointment_notes")
}

model PersonnelOnAppointments {
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  personnelId   String
  personnel     Customer    @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([personnelId, appointmentId])
  @@map("appointment_personnel")
}

enum HairOrderStatus {
  PENDING
  COMPLETED
}

model HairOrder {
  id             String          @id @default(cuid(2))
  placedAt       DateTime?       @db.Date
  arrivedAt      DateTime?       @db.Date
  status         HairOrderStatus @default(PENDING)
  weightReceived Int             @default(0) @db.Integer
  weightUsed     Int             @default(0) @db.Integer
  pricePerGram   Int             @default(0) @db.Integer

  customerId String?
  customer   Customer? @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: SetNull)

  transactions Transaction[]
  notes        HairOrderNote[]

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hair_orders")
}

model HairOrderNote {
  id   String @id @default(cuid(2))
  note String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hairOrderId String
  hairOrder   HairOrder @relation(fields: [hairOrderId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("hair_order_notes")
}
