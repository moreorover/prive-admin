name: Daily Postgres Backup

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  backup:
    environment:
      name: production
      url: https://prive.salon
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:prod-ci

      - name: Test Hostname Resolution
        run: |
          ping -c 3 prive || (echo "Hostname resolution failed!" && exit 1)
          nc -zv prive 22 || (echo "Port 22 is not accessible!" && exit 1)

      - name: Prepare SSH Directory
        run: |
          mkdir -p ~/.ssh
          chmod 0700 ~/.ssh
          ssh-keyscan -H prive >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: ssh -o ConnectTimeout=30 "cicd@prive" "echo 'SSH connection successful!'"

      - name: Copy backup script to VPS
        run: scp scripts/backup_postgres.sh cicd@prive:~/backup_postgres.sh

      - name: Run backup script on VPS
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
        run: |
          ssh cicd@prive "
            chmod +x ~/backup_postgres.sh && \
            PG_USER='${POSTGRES_USER}' \
            PG_PASSWORD='${POSTGRES_PASSWORD}' \
            PG_DATABASE='${POSTGRES_DATABASE}' \
            ~/backup_postgres.sh"

      # --- Cloudflare R2 upload with s3cmd ---
      - name: Install s3cmd
        run: |
          sudo apt-get update -y
          sudo apt-get install -y s3cmd

      - name: Upload backup to Cloudflare R2
        env:
          R2_ACCESS_KEY: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        run: |
          set -e

          # Fetch latest backup file name from remote server
          FILE_NAME=$(ssh cicd@prive "ls -t ~/db_backups/ | head -n1")

          # Download the backup file
          ssh cicd@prive "cat ~/db_backups/$FILE_NAME" > "$FILE_NAME"

          # Configure s3cmd for Cloudflare R2
          cat > ~/.s3cfg <<EOF
          [default]
          access_key = $R2_ACCESS_KEY
          secret_key = $R2_SECRET_KEY
          host_base = ${R2_ACCOUNT_ID}.r2.cloudflarestorage.com
          host_bucket = %(bucket)s.${R2_ACCOUNT_ID}.r2.cloudflarestorage.com
          bucket_location = auto
          use_https = True
          EOF

          # Upload the file to Cloudflare R2
          s3cmd put "$FILE_NAME" "s3://${R2_BUCKET}/$FILE_NAME"

          # Print bucket info for verification
          s3cmd info "s3://${R2_BUCKET}"

          echo "âœ… Uploaded to https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com/${R2_BUCKET}/$FILE_NAME"
